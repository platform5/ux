import { UxCheckboxTheme } from './../../packages/checkbox/src/ux-checkbox-theme';
import { UxRadioTheme } from './../../packages/radio/src/ux-radio-theme';
import { UxSliderTheme } from './../../packages/slider/src/ux-slider-theme';
import { UxDatepickerTheme } from './../../packages/datepicker/src/ux-datepicker-theme';
import { UxTextAreaTheme } from './../../packages/textarea/src/ux-textarea-theme';
import { StyleEngine, UxTheme } from '@aurelia-ux/core';
import { UxInputTheme } from '@aurelia-ux/input';
import { UxChipInputTheme } from '@aurelia-ux/chip-input';
import { UxButtonTheme } from '@aurelia-ux/button';
export interface ThemesSet {
    name: string;
    themes: UxTheme[];
}
export declare class ThemeService {
    private styleEngine;
    themesSets: Array<ThemesSet>;
    currentTheme: 'none' | 'light' | 'dark' | number;
    button: UxButtonTheme;
    input: UxInputTheme;
    textarea: UxTextAreaTheme;
    select: UxTextAreaTheme;
    checkbox: UxCheckboxTheme;
    radio: UxRadioTheme;
    datepicker: UxDatepickerTheme;
    chipInput: UxChipInputTheme;
    slider: UxSliderTheme;
    buttonBorderRadius: number;
    buttonBorderWidth: number;
    inputBorderRadius: number;
    inputBorderWidth: number;
    inputBorderActiveWidth: number;
    textareaBorderRadius: number;
    textareaBorderWidth: number;
    textareaBorderActiveWidth: number;
    selectBorderRadius: number;
    selectBorderWidth: number;
    selectBorderActiveWidth: number;
    datepickerBorderRadius: number;
    datepickerBorderWidth: number;
    datepickerBorderActiveWidth: number;
    chipInputBorderRadius: number;
    chipInputBorderWidth: number;
    chipInputBorderActiveWidth: number;
    sliderThumbDiameter: number;
    sliderTrackHeight: number;
    checkboxBorderWidth: number;
    radioBorderWidth: number;
    constructor(styleEngine: StyleEngine);
    init(): void;
    newThemeSet(): void;
    saveThemesSet(): void;
    get none(): {
        "themeKey": string;
        "controlBackground": string;
        "controlForeground": string;
        "appBackground": string;
        "appForeground": string;
        "surfaceBackground": string;
        "surfaceForeground": string;
        "disabledBackground": string;
        "disabledForeground": string;
        "error": string;
        "errorContrast": string;
        "primary": string;
        "primaryForeground": string;
        "primaryLight": string;
        "primaryLightForeground": string;
        "primaryDark": string;
        "primaryDarkForeground": string;
        "accent": string;
        "accentForeground": string;
        "accentLight": string;
        "accentLightForeground": string;
        "accentDark": string;
        "accentDarkForeground": string;
    }[];
    get light(): {
        "themeKey": string;
        "controlBackground": string;
        "controlForeground": string;
        "appBackground": string;
        "appForeground": string;
        "surfaceBackground": string;
        "surfaceForeground": string;
        "disabledBackground": string;
        "disabledForeground": string;
        "error": string;
        "errorContrast": string;
        "primary": string;
        "primaryForeground": string;
        "primaryLight": string;
        "primaryLightForeground": string;
        "primaryDark": string;
        "primaryDarkForeground": string;
        "accent": string;
        "accentForeground": string;
        "accentLight": string;
        "accentLightForeground": string;
        "accentDark": string;
        "accentDarkForeground": string;
    }[];
    get dark(): {
        "themeKey": string;
        "appBackground": string;
        "appForeground": string;
        "surfaceBackground": string;
        "surfaceForeground": string;
        "controlBackground": string;
        "controlForeground": string;
        "controlLabelColor": string;
        "disabledBackground": string;
        "disabledForeground": string;
        "error": string;
        "errorContrast": string;
        "primary": string;
        "primaryForeground": string;
        "primaryLight": string;
        "primaryLightForeground": string;
        "primaryDark": string;
        "primaryDarkForeground": string;
        "accent": string;
        "accentForeground": string;
        "accentLight": string;
        "accentLightForeground": string;
        "accentDark": string;
        "accentDarkForeground": string;
    }[];
    apply(theme: 'none' | 'light' | 'dark' | number, setLightIfNotFound?: boolean): void;
    resetComponentTheme(key: string): void;
    componentThemeChanged(key: string): void;
    buttonVariableChanged(): void;
    inputVariableChanged(): void;
    chipInputVariableChanged(): void;
    textareaVariableChanged(): void;
    selectVariableChanged(): void;
    datepickerVariableChanged(): void;
    sliderVariableChanged(): void;
    checkboxVariableChanged(): void;
    radioVariableChanged(): void;
}
